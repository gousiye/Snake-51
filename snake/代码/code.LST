C51 COMPILER V9.00   CODE                                                                  06/15/2022 22:55:29 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE CODE
OBJECT MODULE PLACED IN code.OBJ
COMPILER INVOKED BY: D:\OneDrive\LYZ\University\大二下\智能控制系统\Keil\keilc51\C51\BIN\C51.EXE code.c BROWSE DEBUG OBJ
                    -ECTEXTEND

line level    source

   1          #include <reg52.h>
   2          
   3          #define lattice_len 32 //16x16点阵，用32字节存储
   4          
   5          typedef unsigned char u8;  //一个字节的数
   6          
   7          sbit st = P3 ^ 0;
   8          sbit sh = P3 ^ 1;
   9          sbit ds = P3 ^ 2; //单片机连接595的IO口
  10          
  11          sbit up = P1 ^ 0;
  12          sbit down = P1 ^ 1;
  13          sbit left = P1 ^ 2;
  14          sbit right = P1 ^ 3;
  15          sbit start = P1 ^ 4;    //游戏进行的时候不能重新开始
  16          sbit pause = P1 ^ 5; //游戏暂停
  17          sbit speedup = P1 ^ 6;
  18          sbit speeddown = P1 ^ 7;
  19          
  20          
  21          u8 xdata lattice_matrix[lattice_len];    //16x16点阵存储数组
  22          u8 xdata* data lattice_buf = lattice_matrix;
  23          u8 is_start = 0; //防止一开始往反向走
  24          u8 speed = 5;  //蛇的移动速度
  25          //  0   16
  26          //  1   17
  27          //……
  28          
  29          
  30          u8 xdata snake_matrix[lattice_len * lattice_len];   //data里面存不下了  前4位x，后四位y坐标
  31          u8 xdata* data snake = snake_matrix;              //通过data里的psnake来访问snake。
  32          u8 snake_len = 0; // 蛇的长度
  33          u8 direction = 5;  //蛇头的运动方向，5表示初始为静止
  34          
  35          u8 code match[8] = { 1,2,4,8,16,32,64,128 };
  36          u8 code segcode[10] = { 0x3f,0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f };
  37          u8 tcount = 0;
  38          u8 is_food = 1;   //为1表示需要食物
  39          u8 food = 0; //前四位是x，后四位是y
  40          u8 is_live = 1;  //判断是否游戏结束
  41          
  42          void delay(unsigned int i) {
  43   1          while (i--) { }
  44   1      }
  45          
  46          void init595() {
  47   1          st = sh = ds = 0;
  48   1      }
  49          
  50          void write_to_595(u8 dat) {    //给595写入数据
  51   1          u8 i = 0;
  52   1          for (i = 0; i < 8; i++) {
  53   2              sh = 0;
  54   2              ds = dat & 0x80;    //每次取最高位
C51 COMPILER V9.00   CODE                                                                  06/15/2022 22:55:29 PAGE 2   

  55   2              sh = 1;    //上升沿读ds
  56   2              dat <<= 1;  //左移一位s
  57   2          }
  58   1      }
  59          
  60          void send_from_595() {         //595输出
  61   1          sh = 0;
  62   1          st = 0;     //产生一个上升沿
  63   1          st = 1;
  64   1          ds = 0;
  65   1          st = 1;
  66   1      }
  67          
  68          
  69          void lattice_ini(u8 value) {       //初始化点阵阵列.一开始全灭
  70   1          short int i = 0;
  71   1          for (i; i < lattice_len; i++) {
  72   2              lattice_buf[i] = value;
  73   2          }
  74   1      }
  75          
  76          void lattice_refresh() {      //刷新点阵，从上往下刷新
  77   1          static u8 row = 0;    //存储当前的列编号
  78   1          write_to_595(lattice_buf[row + 16]);
  79   1          write_to_595(lattice_buf[row]);
  80   1          if (row < 8) {        //上半屏
  81   2              write_to_595(0xff);    //先写的会被移到级联得后面
  82   2              write_to_595(~match[row]);
  83   2          }
  84   1          else {
  85   2              write_to_595(~match[row - 8]);
  86   2              write_to_595(0xff);
  87   2          }
  88   1          send_from_595();
  89   1          row += 1;
  90   1          row %= 16;
  91   1      }
  92          
  93          void ini_snake() {
  94   1          snake[0] = 7 * 16 + 8;
  95   1          snake[1] = 7 * 16 + 7;
  96   1          snake[2] = 7 * 16 + 6;
  97   1          snake[3] = 7 * 16 + 5;
  98   1          snake_len = 4;
  99   1      }
 100          
 101          void illuminate_spot(u8 x, u8 y, bit onf) {   //点亮或熄灭给定位置的灯 左上角为原点，行为x，列为y
 102   1          u8 blocky = y / 8;         //判断左半屏还是右半屏
 103   1          u8 posy = y % 8;
 104   1          if (onf)
 105   1              lattice_buf[x + 16 * blocky] |= match[posy];       //点亮
 106   1          else
 107   1              lattice_buf[x + 16 * blocky] &= ~match[posy];   //熄灭
 108   1      }
 109          
 110          void illuminate_snake() {          //显示整个蛇
 111   1          u8 i = 0;
 112   1          for (i; i < snake_len; i++) {
 113   2              illuminate_spot(snake[i] / 16, snake[i] % 16, 1);
 114   2          }
 115   1      }
 116          
C51 COMPILER V9.00   CODE                                                                  06/15/2022 22:55:29 PAGE 3   

 117          void judge() {
 118   1          //判断按键，不能反向移动
 119   1          if (up == 0 && direction != 1) {
 120   2              delay(20);
 121   2              if (up == 0 && direction != 1) {
 122   3                  is_start = 1;
 123   3                  direction = 0;
 124   3              }
 125   2          }
 126   1          if (down == 0 && direction != 0) {
 127   2              delay(20);
 128   2              if (down == 0 && direction != 0) {
 129   3                  is_start = 1;
 130   3                  direction = 1;
 131   3              }
 132   2          }
 133   1          if (left == 0 && direction != 3) {
 134   2              delay(20);
 135   2              if (left == 0 && direction != 3 && is_start == 1)
 136   2                  direction = 2;
 137   2          }
 138   1          if (right == 0 && right != 2) {
 139   2              delay(20);
 140   2              if (right == 0 && direction != 2) {
 141   3                  direction = 3;
 142   3                  is_start = 1;
 143   3              }
 144   2          }
 145   1      }
 146          
 147          
 148          void move() {
 149   1          if (direction < 5) {          //5为表示静止
 150   2              u8 tail = snake[snake_len - 1];
 151   2              u8 i = 1, j = 1;
 152   2              for (i = snake_len - 1; i >= 1; i--) {
 153   3                  snake[i] = snake[i - 1];
 154   3              }
 155   2              if (direction == 0) {   //向上运动
 156   3                  if (snake[0] / 16 == 0)
 157   3                      is_live = 0;      //游戏结束了
 158   3                  else snake[0] = snake[0] - 16;
 159   3              }
 160   2              else if (direction == 1) {   //向下运动
 161   3                  if (snake[0] / 16 == 15)
 162   3                      is_live = 0;
 163   3                  else snake[0] = snake[0] + 16;
 164   3              }
 165   2              else if (direction == 2) {  //向左运动
 166   3                  if (snake[0] % 16 == 0)
 167   3                      is_live = 0;
 168   3                  else snake[0] = snake[0] - 1;
 169   3              }
 170   2              else if (direction == 3) {   //向右运动
 171   3                  if (snake[0] % 16 == 15)
 172   3                      is_live = 0;
 173   3                  snake[0] = snake[0] + 1;
 174   3              }
 175   2      
 176   2              if (snake[0] == food) {     //吃到食物尾巴不移动
 177   3                  snake[snake_len] = tail;
 178   3                  snake_len += 1;
C51 COMPILER V9.00   CODE                                                                  06/15/2022 22:55:29 PAGE 4   

 179   3                  is_food = 1;      //需要生成新的食物
 180   3              }
 181   2              else
 182   2                  illuminate_spot(tail / 16, tail % 16, 0);
 183   2              //先显示头，头正好走到之前的尾巴的话会被更新为不显示
 184   2              illuminate_spot(snake[0] / 16, snake[0] % 16, 1);
 185   2              for (j; j < snake_len; j++) {
 186   3                  if (snake[j] == snake[0]) {    //撞到了自己
 187   4                      is_live = 0;
 188   4                      break;
 189   4                  }
 190   3              }
 191   2              if (is_live == 0)
 192   2                  lattice_ini(255);
 193   2          }
 194   1      }
 195          
 196          
 197          void produce_food() {
 198   1          u8 i;
 199   1          static u8 cnt = 0;
 200   1          cnt++;           //cnt实现伪随机
 201   1          if (is_food == 1) {
 202   2              for (i = 0; i < snake_len; i++) {
 203   3                  if (cnt == snake[i])    //食物不能生成在蛇的身上
 204   3                      break;
 205   3              }
 206   2              if (i == snake_len) {
 207   3                  is_food = 0;    //已经生成了食物
 208   3                  food = cnt;
 209   3                  illuminate_spot(food / 16, food % 16, 1);
 210   3              }
 211   2              else cnt += 17;    //质数保证能遍历所有的格子
 212   2          }
 213   1      }
 214          
 215          void speed_judge() {
 216   1          if (pause == 1 || is_start == 0 || is_live == 0) {
 217   2              if (speedup == 0) {
 218   3                  delay(20);
 219   3                  if (speedup == 0) {
 220   4                      if (speed >= 2) {
 221   5                          speed -= 1;
 222   5                          delay(30000);
 223   5                      }
 224   4                  }
 225   3              }
 226   2              if (speeddown == 0) {
 227   3                  delay(20);
 228   3                  if (speeddown == 0) {
 229   4                      if (speed < 9) {
 230   5                          speed += 1;
 231   5                          delay(30000);
 232   5                      }
 233   4                  }
 234   3              }
 235   2              P2 = segcode[10-speed];
 236   2          }
 237   1      }
 238          
 239          void recovery() {
 240   1          //速度不重置
C51 COMPILER V9.00   CODE                                                                  06/15/2022 22:55:29 PAGE 5   

 241   1          is_live = 1;
 242   1          direction = 5;
 243   1          is_food = 1;
 244   1          tcount = 0;
 245   1          is_start = 0;
 246   1          TH1 = 0x3c;
 247   1          TL1 = 0xb0;
 248   1          init595();
 249   1          lattice_ini(0);
 250   1          ini_snake();
 251   1          illuminate_snake();
 252   1      }
 253          
 254          void main() {
 255   1          TMOD = 0x01;
 256   1          TH1 = 0x3c;               //定时50ms
 257   1          TL1 = 0xb0;
 258   1          EA = 1;
 259   1          ET1 = 1;
 260   1          TR1 = 1;
 261   1          P2 = segcode[10-speed];
 262   1          init595();
 263   1          lattice_ini(0);
 264   1          ini_snake();            //初始化蛇的位置
 265   1          illuminate_snake();     //点亮初始的位置
 266   1      
 267   1          while (1) {
 268   2              lattice_refresh();
 269   2              delay(20);
 270   2              speed_judge();
 271   2              if (is_live == 1 && pause == 0) {   //死了就一直显示当前画面
 272   3                  judge();
 273   3                  if (tcount == 10 * speed) {
 274   4                      tcount = 0;
 275   4                      move();
 276   4                  }
 277   3                  produce_food();
 278   3              }
 279   2              else {
 280   3                  if (start == 0) {     //重新开始
 281   4                      delay(20);
 282   4                      if (start == 0) {
 283   5                          recovery();
 284   5                      }
 285   4                  }
 286   3              }
 287   2          }
 288   1      }
 289          
 290          void timeout() interrupt 3{    //用定时器0不知道为什么会出现神奇错误
 291   1          TH1 = 0x3c;
 292   1          TL1 = 0xb0;
 293   1          tcount += 1;             //标记定时结束
 294   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1063    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   1056    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       6
C51 COMPILER V9.00   CODE                                                                  06/15/2022 22:55:29 PAGE 6   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
